[binaries]
ar     = '/usr/bin/llvm-ar-13'
cpp    = '/usr/bin/clang++-13'
cpp_ld = '/usr/bin/ld.lld-13'
strip  = '/usr/bin/llvm-strip-13'

[host_machine]
system     = 'system'
cpu_family = 'x86_64'
cpu        = 'x86_64'
endian     = 'little'

[built-in options]
cpp_args = [
    '-isystem', '../src/lib/libcxx',  # Set src/lib/libcxx as the root system include directory.
    '-mcmodel=small',                 # Assume that all code/data in the compiled binary fit within 2GB. This allows us to use 32-bit offsets for RIP-relative addressing, which requires fewer/faster instructions. See https://eli.thegreenplace.net/2012/01/03/understanding-the-x64-code-models.
    '-fchar8_t',                      # Enable the C++20 char8_t type.
    '-ffreestanding',                 # Build for a freestanding (not hosted) environment so the binary can run on bare metal with little-to-no standard library or OS support. See https://gcc.gnu.org/onlinedocs/gcc/Standards.html, search for "freestanding".
    '-flto=thin',                     # Enable LLVM's thin link-time optimization.
    '-fno-builtin',                   # Disable implicit builtin knowledge of functions.
    '-fno-exceptions',                # Disable C++ exception support.
    '-fno-rtti',                      # Disable generation of RunTime Type Information (RTTI) data.
    '-fno-threadsafe-statics',        # Don't emit code to make initialization of local statics thread-safe (__cxa_guard_XXX functions).
    '-fpic',                          # Generate position-independent code.
    '-nostdinc',                      # Disable all standard #include directories - C Standard Library, C++ Standard Library, system, etc.
    '-nostdinc++',                    # Disable all standard #include directories - C Standard Library, C++ Standard Library, system, etc.
    '-std=c++2a',                     # Conform to the C++20 standard.
    '-Wall']                          # Enable all warnings.
cpp_link_args = [
    '-nostdlib']                      # Disable linking against all default libraries and start files - builtins, math, libgcc, libc, libc++, etc.
