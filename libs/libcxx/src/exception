/**
 * @file
 * @brief Base implementation of the `std::exception` interface.
 * 
 * @note Some comments and implementations in this file were based off of or
 * taken directly from the descriptions on
 * https://en.cppreference.com/w/cpp/error/exception and various subpages.
 * All errors are mine, all credit is theirs.
 */
#ifndef _STD_EXCEPTION_HPP
#define _STD_EXCEPTION_HPP

namespace std {

/**
 * @brief Provides a consistent interface for exception-based error handling
 * with the `throw` expression. All exceptions generated by the C++ standard
 * library inherit from `std::exception`.
 */
class exception {
public:
    /**
     * @brief Default constructor. `what()` returns an implementation-defined
     * null-terminated character sequence.
     */
    exception() noexcept {}

    /**
     * @brief Copy constructor; initializes contents with `in_other`. If
     * `*this` and `in_other` both have dynamic type `std::exception`, then the
     * null-terminated character sequences returned by `what()` will be equal.
     * 
     * @param in_other exception to copy from
     */
    exception(const exception& in_other) noexcept = default;

    /**
     * @brief Destroys the exception object.
     */
    virtual ~exception() noexcept;

    /**
     * @brief Returns an explanatory message as a null-terminated character
     * sequence.
     * 
     * @return `const char*` explanatory message as a null-terminated character
     * sequence; guaranteed to be valid until this exception instance is
     * destroyed, or a non-const member function on this exception object is
     * called
     */
    virtual const char* what() const noexcept;
}; // class exception

}; // namespace std

#endif // _STD_EXCEPTION_HPP