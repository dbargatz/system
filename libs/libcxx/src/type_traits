/**
 * @file
 * @brief Implementations of compile-time template-based interfaces to query
 * various properties of types at compile-time, as defined by C++20 (N4849
 * draft) sections 20.15. Also known as metaprogramming.
 * 
 * @note Some comments and implementations in this file were based off of or
 * taken directly from the descriptions on
 * https://en.cppreference.com/w/cpp/header/type_traits and various subpages.
 * All errors are mine, all credit is theirs.
 */
#ifndef _STD_TYPE_TRAITS_HPP
#define _STD_TYPE_TRAITS_HPP

#include <__type_traits/__array_modifications.hpp>
#include <__type_traits/__composite_categories.hpp>
#include <__type_traits/__cv_modifications.hpp>
#include <__type_traits/__decay.hpp>
#include <__type_traits/__helpers.hpp>
#include <__type_traits/__is_reference.hpp>
#include <__type_traits/__misc_transformations.hpp>
#include <__type_traits/__pointer_modifications.hpp>
#include <__type_traits/__primary_categories.hpp>
#include <__type_traits/__properties.hpp>
#include <__type_traits/__reference_modifications.hpp>
#include <__type_traits/__relationships.hpp>
#include <__type_traits/__supported_operations.hpp>
#include <__type_traits/__trait_operations.hpp>

#endif // _STD_TYPE_TRAITS_HPP