[binaries]
ar     = '/usr/bin/llvm-ar'
cpp    = '/usr/bin/clang++'
cpp_ld = '/usr/bin/ld.lld'
strip  = '/usr/bin/llvm-strip'

# The build machine, in meson terminology, is the machine that will be
# compiling binaries. Currently, binaries for system can only be built on
# 64-bit ARM (aarch64) Linux, because my dev machine is a Mac Studio with an M1
# CPU, and the devcontainer is Debian Bullseye Linux, resulting in an aarch64
# Linux build machine.
[build_machine]
system     = 'linux'
cpu_family = 'aarch64'
cpu        = 'aarch64'
endian     = 'little'

[constants]
base_cpp_args = [
    '-gdwarf-4',                         # Use DWARFv4 for debugging info, as DWARFv5 (the default for Clang 14+) causes problems in GDB currently.
    '-isystem', '../../libs/libcxx/src', # Set libs/libcxx/src as the root system include directory.
    '-mcmodel=small',                    # Assume that all code/data in the compiled binary fit within 2GB. This allows us to use 32-bit offsets for RIP-relative addressing, which requires fewer/faster instructions. See https://eli.thegreenplace.net/2012/01/03/understanding-the-x64-code-models.
    '-fchar8_t',                         # Enable the C++20 char8_t type.
    '-ffreestanding',                    # Build for a freestanding (not hosted) environment so the binary can run on bare metal with little-to-no standard library or OS support. See https://gcc.gnu.org/onlinedocs/gcc/Standards.html, search for "freestanding".
    '-flto=thin',                        # Enable LLVM's thin link-time optimization.
    '-fno-builtin',                      # Disable implicit builtin knowledge of functions.
    '-fno-exceptions',                   # Disable C++ exception support.
    '-fno-rtti',                         # Disable generation of RunTime Type Information (RTTI) data.
    '-fno-threadsafe-statics',           # Don't emit code to make initialization of local statics thread-safe (__cxa_guard_XXX functions).
    '-fPIC',                             # Generate position-independent code.
    '-nostdinc',                         # Disable all standard #include directories - C Standard Library, C++ Standard Library, system, etc.
    '-std=c++2a',                        # Conform to the C++20 standard.
    '-Wall']                             # Enable all warnings.
base_cpp_link_args = [
    '-static',                        # Generate a statically-linked binary.
    '-nostdlib']                      # Disable linking against all default libraries and start files - builtins, math, libgcc, libc, libc++, etc.
